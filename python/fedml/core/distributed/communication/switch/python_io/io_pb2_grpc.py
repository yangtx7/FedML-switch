# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import io_pb2 as io__pb2


class SwitchmlIOStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Retransmission = channel.unary_unary(
                '/SwitchmlIO/Retransmission',
                request_serializer=io__pb2.Retransmission.Request.SerializeToString,
                response_deserializer=io__pb2.Null.FromString,
                )
        self.ReadMissingSlice = channel.unary_unary(
                '/SwitchmlIO/ReadMissingSlice',
                request_serializer=io__pb2.PacketLoss.Request.SerializeToString,
                response_deserializer=io__pb2.PacketLoss.Response.FromString,
                )


class SwitchmlIOServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Retransmission(self, request, context):
        """发送方重传特定片段，然后接收方完成接收任务
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadMissingSlice(self, request, context):
        """发送方检查接收方丢包状态
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SwitchmlIOServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Retransmission': grpc.unary_unary_rpc_method_handler(
                    servicer.Retransmission,
                    request_deserializer=io__pb2.Retransmission.Request.FromString,
                    response_serializer=io__pb2.Null.SerializeToString,
            ),
            'ReadMissingSlice': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadMissingSlice,
                    request_deserializer=io__pb2.PacketLoss.Request.FromString,
                    response_serializer=io__pb2.PacketLoss.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'SwitchmlIO', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SwitchmlIO(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Retransmission(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SwitchmlIO/Retransmission',
            io__pb2.Retransmission.Request.SerializeToString,
            io__pb2.Null.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReadMissingSlice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SwitchmlIO/ReadMissingSlice',
            io__pb2.PacketLoss.Request.SerializeToString,
            io__pb2.PacketLoss.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
